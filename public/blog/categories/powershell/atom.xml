<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PowerShell | Wishful Coding]]></title>
  <link href="http://wishfulcoding.com/blog/categories/powershell/atom.xml" rel="self"/>
  <link href="http://wishfulcoding.com/"/>
  <updated>2012-11-09T00:30:07+11:00</updated>
  <id>http://wishfulcoding.com/</id>
  <author>
    <name><![CDATA[Leonardo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic DNS Updates on Namecheap Via a PowerShell Script]]></title>
    <link href="http://wishfulcoding.com/blog/2012/09/10/dynamic-dns-updates-on-namecheap-via-a-powershell-script/"/>
    <updated>2012-09-10T23:38:00+10:00</updated>
    <id>http://wishfulcoding.com/blog/2012/09/10/dynamic-dns-updates-on-namecheap-via-a-powershell-script</id>
    <content type="html"><![CDATA[<p>Last year I decided to transfer my domains from GoDaddy to <a href="http://www.namecheap.com/">Namecheap</a>, for <a href="http://geekfeminism.wikia.com/wiki/Go_Daddy's_advertising">no</a> <a href="http://www.huffingtonpost.com/2011/03/31/bob-parsons-godaddy-ceo-elephant-hunt_n_843121.html">particular</a> <a href="http://arstechnica.com/tech-policy/2011/12/godaddy-faces-december-29-boycott-over-sopa-support/">reason</a>. With the new registrar I wanted to try some things I never got around to do before, including setting up a subdomain for easy remote access to a location I shall henceforth refer to as Home.</p>

<p>Since Home lacks a static IP I had to enable dynamic DNS for the domain, which basically allows changing the IP address associated to a given subdomain programmatically and with immediate effect. Fortunately there is <a href="http://www.namecheap.com/support/knowledgebase/category.aspx/11/dynamic-dns">plenty of information</a> on <a href="http://www.namecheap.com/support/knowledgebase/article.aspx/36/11/what-should-i-do-in-order-to-start-using-dynamic-dns">what needs to be done</a>.</p>

<p>The step I had trouble with was finding a client to perform the DNS updates on a regular fashion, say, every hour, from a Windows PC behind a proxy that requires authentication. Now Namecheap has a <a href="http://www.namecheap.com/support/knowledgebase/article.aspx/111/11/using-namecheap-dynamic-dns-client-version-20x-beta">Dynamic DNS client of their own</a>, but for reasons I can't remember at this moment it didn't work for me when I tried it. Namecheap also provides a list of <a href="http://www.namecheap.com/support/knowledgebase/article.aspx/5/11/are-there-any-alternate-dynamic-dns-clients">alternate clients</a>, but again none of them fitted my bill exactly. As a last resort, they also allow updating the DNS <a href="http://www.namecheap.com/support/knowledgebase/article.aspx/29/11/how-to-use-the-browser-to-dynamically-update-hosts-ip">via a HTTP GET request</a>, which means you can easily do it with a web browser or programmatically with an appropriate HTTP command/library.</p>

<p>So even though this is probably a problem that has been solved many times, I wanted to indulge in a little bit of <a href="http://en.wikipedia.org/wiki/Not_invented_here">NIH</a> and write my own client as a PowerShell script. Specifically I wanted to:</p>

<ol>
<li>Load parameters from a configuration file</li>
<li>Retrieve current public IP address</li>
<li>Compare IP address against the one on Subdomain's A record</li>
<li>Update A record if found different</li>
<li>Send an email with the results</li>
</ol>


<p>Here's is what I did.</p>

<h3>Configuration File</h3>

<p>Instead of hardcoding things like the domain and password I wanted to load configuration details from an <a href="http://en.wikipedia.org/wiki/INI_file">INI file</a>, so that the script could be reusable. Why INI and not, say, XML? Because for such a simple list of parameters I find the INI format much easier to read. I could also have used <a href="http://www.yaml.org/">YAML</a>, but then it's just a simple change from equal sign to colon on the parser. Anyway, here's the full list of parameters to load from the INI file:</p>

<p>``` ruby</p>

<h1>The subdomain to be updated, which has to be previously configured</h1>

<h1>as an A record.</h1>

<p>DDNSSubdomain   = "subdomain"</p>

<h1>The domain registered through Namecheap, with Dynamic DNS enabled.</h1>

<p>DDNSDomain      = "mydomain.com"</p>

<h1>The password for authorising the updates, obtained from Namecheap</h1>

<h1>upon enabling Dynamic DNS (see http://tinyurl.com/d6ao9de).</h1>

<p>DDNSPassword    = "1234567890abcdef1234567890abcdef"</p>

<h1>An email account from which a message with the results of the</h1>

<h1>update attempt will be sent.</h1>

<p>EmailFrom       = "from@example.com"</p>

<h1>The recipient of the message.</h1>

<p>EmailTo         = "to@example.com"</p>

<h1>The SMTP server for sending the email. I'm currently using GMail.</h1>

<p>SMTPServer      = "smtp.gmail.com"</p>

<h1>The SMTP port.</h1>

<p>SMTPPort        = 587</p>

<h1>SMTP username. If you are sending messages through GMail, then it</h1>

<h1>would be your Google account.</h1>

<p>SMTPAuthUsername= "gmailuser"</p>

<h1>SMTP password.</h1>

<p>SMTPAuthPassword= "p4ssw0rd"</p>

<h1>If connecting through a proxy, this parameter should be set to 1.</h1>

<h1>Otherwise it should be 0 or left unitialised</h1>

<p>ProxyEnabled    = 1</p>

<h1>The proxy address. Ignored if ProxyEnabled is not 1.</h1>

<p>ProxyAddress    = "proxy.mydomain.com"</p>

<h1>The proxy port.</h1>

<p>ProxyPort       = 8080</p>

<h1>Proxy domain.</h1>

<p>ProxyDomain     = "corporate"</p>

<h1>Proxy credentials, if required.</h1>

<p>ProxyUser       = "domainuser"</p>

<h1>See above.</h1>

<p>ProxyPassword   = "domainpassword"
```</p>

<p>For parsing the file I used the following snippet, adapted from <a href="http://stackoverflow.com/a/422529">Artem Tikhomirov's code posted on Stack Overflow</a>:</p>

<p>``` ruby
Function Parse-IniFile ($file) {</p>

<pre><code>$ini = @{}
switch -regex -file $file {
    "^\s*([^#].+?)\s*=\s*\`"*(.*?)\`"*$" {
        $name,$value = $matches[1..2]
        $ini[$name] = $value.Trim()
    }
}
$ini
</code></pre>

<p>}
```</p>

<h3>Retrieving current public IP address</h3>

<p>With <a href="http://myip.dnsomatic.com">DNS-O-Matic</a> you can get your current public IP address in a plain format so there is nothing to parse and the result can be used immediately. I don't remember where I got the tip from so I'll just give <a href="http://poshcode.com/2661">this guy the credit</a>:</p>

<p>``` ruby</p>

<h1>Retrieve public IP address</h1>

<p>$CurrentIp = (New-Object System.Net.WebClient).DownloadString('http://myip.dnsomatic.com/')</p>

<h1>Validate using a regular expression (only IPv4 supported at this stage)</h1>

<p>$Pattern   = '\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}'
if (!($CurrentIp -match $Pattern)) {</p>

<pre><code>Log-Error "A valid public IP address could not be retrieved"
# Error handling
</code></pre>

<p>}
```</p>

<h3>Comparing IP addresses and updating A record</h3>

<p>I need to perform the GET request to update the A record, but only if the current public IP address is different to the one already set. I do not want, however, to spam the Namecheap servers with continuous queries every time I want to verify the existing value. So instead of retrieving the A record from Namecheap, I use a local environment variable to store the last known IP address. That works because I'm updating the IP from a single server, so there are no possible conflicts to be worried about.</p>

<p>``` ruby</p>

<h1>Retrieve IP address stored on environment variable.</h1>

<p>$StoredIp  = <a href=":SetEnvironmentVariable(%22PUBLIC_IP%22,">Environment</a>::GetEnvironmentVariable("PUBLIC_IP","User")</p>

<h1>If IP address hasn't changed, then finish the script.</h1>

<p>if ($StoredIp -eq $CurrentIp ) {</p>

<pre><code># Log message, etc.
exit 0
</code></pre>

<p>}</p>

<h1>Otherwise, create update URI and perform a Web request.</h1>

<p>$UpdateUrl     = "https://dynamicdns.park-your-domain.com/update?host=$DDNSSubdomain&amp;domain=$DDNSDomain&amp;password=$DDNSPassword&amp;ip=$CurrentIp"
$UpdateDDNS    = (New-Object System.Net.WebClient).DownloadString($UpdateUrl)</p>

<h1>Error handling omitted for clarity. Or laziness.</h1>

<h1>Finally, set the environment variable to the new IP address</h1>

<p>```</p>

<h3>Sending an email to notify the change</h3>

<p>Next is to report the change of IP address via email, so I can validate and/or troubleshoot in case something went wrong.</p>

<p>You can choose between writing a log to a local text file, for example, and then include that file as an email attachment. In my case, since I never expect the logs to be too large, I'm just concatenating to a string in memory and then writing to the body of the message. Here's my function for sending the email, based on <a href="http://stackoverflow.com/a/2250309/1014">this code from Christian Muggli</a>:</p>

<p>``` ruby</p>

<h1>Send an email with the contents of the log buffer.</h1>

<h1>SMTP configuration and credentials are in the configuration dictionary.</h1>

<p>function Email-Log ($config, $message) {</p>

<pre><code>$EmailFrom        = $config["EmailFrom"]
$EmailTo          = $config["EmailTo"]
$EmailSubject     = "DDNS log $(get-date -format u)"  

$SMTPServer       = $config["SMTPServer"]
$SMTPPort         = $config["SMTPPort"]
$SMTPAuthUsername = $config["SMTPAuthUsername"]
$SMTPAuthPassword = $config["SMTPAuthPassword"]

$mailmessage = New-Object System.Net.Mail.MailMessage 
$mailmessage.From = $EmailFrom
$mailmessage.To.Add($EmailTo)
$mailmessage.Subject = $EmailSubject
$mailmessage.Body = $message

$SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, $SMTPPort) 
$SMTPClient.EnableSsl = $true 
$SMTPClient.Credentials = New-Object System.Net.NetworkCredential("$SMTPAuthUsername", "$SMTPAuthPassword") 
$SMTPClient.Send($mailmessage)
</code></pre>

<p>}
```</p>

<p><a href="https://gist.github.com/3508143">The full script can be downloaded from Github</a>.</p>

<p>To run the query, open a console and execute the following line:</p>

<pre><code>powershell -command "&amp; 'C:\path\to\script\UpdateDDNS.ps1 -c config.ini' "
</code></pre>

<p>The final step would be to schedule the command so it runs every hour, for example. You just need to set up a task on Windows Task Scheduler for that, but since you asked, <a href="http://blogs.technet.com/b/heyscriptingguy/archive/2012/08/11/weekend-scripter-use-the-windows-task-scheduler-to-run-a-windows-powershell-script.aspx">here are some instructions to get you started</a>.</p>

<p>So that's it: A quick, cheap and easy way to keep your Namecheap domains with Dynamic DNS up to date. Now that we're done, let's return to bashing Bob Parsons on Twitter, shall we?</p>
]]></content>
  </entry>
  
</feed>
