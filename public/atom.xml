<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wishful Coding]]></title>
  <link href="http://wishfulcoding.com/atom.xml" rel="self"/>
  <link href="http://wishfulcoding.com/"/>
  <updated>2012-09-03T00:08:55+10:00</updated>
  <id>http://wishfulcoding.com/</id>
  <author>
    <name><![CDATA[Leonardo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Chrome: First Impressions (4 years later)]]></title>
    <link href="http://wishfulcoding.com/blog/2012/09/02/google-chrome-first-impressions-4-years-later/"/>
    <updated>2012-09-02T23:25:00+10:00</updated>
    <id>http://wishfulcoding.com/blog/2012/09/02/google-chrome-first-impressions-4-years-later</id>
    <content type="html"><![CDATA[<p>Exactly 4 years ago, on 2 September 2008, Google released the first beta of their web browser: <a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a>. I remember how difficult it was to download it that same day, with Google&#8217;s servers probably brought to their knees, and then how I stopped at pretty much everyone&#8217;s desk to <s>procrastinate</s> exchange impressions. I decided to keep it around for a while to see where it would go. Eventually I stopped using all the other browsers on a daily basis, and today it is the first software I install on any new computer (with the obvious exception of the operating system itself). This is what I thought back then:</p>

<blockquote><p>Just downloaded Chrome, a new browser by Google, and their latest step towards absolute Internet domination.</p>

<p>First thing I notice after installing: It&#8217;s fast. As in impossibly fast, especially when compared to Internet Explorer. Opening tabs is instantaneous: there is no weird delay between pressing the new tab button and that tab being ready to use.</p>

<p>The vertical scrolling in my laptop&#8217;s trackpad is broken: It only scrolls down. It does work however with the in-browser adobe PDF reader.</p>

<p>Searching inside a page is simple, although somewhat limited. You can&#8217;t specify case-sensitive searches, for instance.</p>

<p>Importing from Firefox worked flawlessly.</p>

<p>Zooming in has a devastating effect on page layout: Only the font size is incremented. I thought this was a solved problem on modern browsers. I hope they fix it soon.</p>

<p><a href="http://backpackit.com">Backpack</a> has a weird alignment in the login page. Everything else is working as expected.</p>

<p>I&#8217;m trying some random websites, and all of them are rendering fine: <a href="http://www.joelonsoftware.com/">Joel on Software</a>, <a href="http://www.codinghorror.com/">Coding Horror</a>, <a href="http://www.fakeplasticrock.com/">Fake Plastic Rock</a>, <a href="http://stackoverflow.com/">Stack Overflow</a>, <a href="http://alltop.com/">Alltop</a>, <a href="http://popurls.com/">Popurls</a> and of course <a href="http://www.google.com">Google itself</a>.</p>

<p>The address bar is not as fast as Firefox&#8217;s awesome bar. It&#8217;s not bad, though.</p>

<p>Searches through the address bar use the Google site corresponding to my current location and I can&#8217;t find a way to change it to google.com instead.</p>

<p>In a perfect world, an archetypal web browser would exist and every single website would render perfectly in that browser. We don&#8217;t live in a perfect world, though, and at least in these early stages I don&#8217;t see Google Chrome being the one and only browser for every user and every possible situation. I&#8217;ll keep an eye on it anyway to see where it goes.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Wishful Thinking]]></title>
    <link href="http://wishfulcoding.com/blog/2012/08/22/on-wishful-thinking/"/>
    <updated>2012-08-22T11:21:00+10:00</updated>
    <id>http://wishfulcoding.com/blog/2012/08/22/on-wishful-thinking</id>
    <content type="html"><![CDATA[<p>I love <a href="http://blogs.msdn.com/b/oldnewthing/">Raymond Chen&#8217;s blog</a>, especially when he goes thermonuclear on his customers (or readers) for asking stupid questions or trying to go off topic or, you know, just plain trolling.</p>

<p>Something I find funny about the highly technical posts on his blog is that Mr Chen usually supplements his explanations with witty remarks like &#8220;the customer managed to screw it despite this being clearly documented here and here and there.&#8221; Well of course he is being polite, since it should surprise no one the fact that most people just do not care about documentation or doing things the right way in general.</p>

<p>You see, a lot of companies employing programmers (I dare say most of them) are usually not that interested in the long lasting quality of internal software products. If, as a developer, you know your application will have to be ready in less than 2 weeks, will be used only by a handful of people with pretty much identical skill set and low self-esteem, you won&#8217;t lose that much time in making sure your solution is absolutely the best anyone can come up with. You won&#8217;t care if it&#8217;s efficient, with great performance and minimum memory consumption, or if it has a usable user interface.</p>

<p>When a programmer finds an error the usual way to solve it goes like this:</p>

<p><a href="http://www.flickr.com/photos/wishfulcoding/6315168390/"><img src="http://farm7.static.flickr.com/6032/6315168390_be3136771f.jpg" width="100%" alt="Wishful Thinking"></a></p>

<p>So, this marvellous reasoning means that most of the time we won&#8217;t slow down to understand what&#8217;s going on, what went wrong and how to solve it nicely. It means that by sheer luck sometimes we&#8217;ll come up with a working solution, and most of the time we&#8217;ll create a time bomb. The code will work ok on our machines under very specific circumstances, and then it will fail spectacularly on a live environment or down the road when some of the specs/settings change in an unexpected way. And the whole cycle will start again. Most of the time it won&#8217;t even get to this point, because the application will be decommissioned, or because we will have moved on to a different project/department/company.</p>

<p>I think of a particular aspect of this reasoning, the &#8220;Let&#8217;s try the first thing that comes to my mind and see if it works&#8221;, as a special case of wishful thinking I like to call <em>Wishful Coding</em>. It basically involves trying to adapt programming tools and languages to our mental model, because &#8220;That&#8217;s how I imagine this class or function should behave so let&#8217;s just assume they will and hope for the best.&#8221;</p>

<p>Wishful coding is the reason why <a href="http://thedailywtf.com/">The Daily WTF</a> continues to thrive and why there&#8217;s a whole subculture of mocking catastrophically funny pieces of code. It&#8217;s especially bad on languages with unsafe constructs (like C or C++) which don&#8217;t offer enough safety nets by default, such as garbage collection or boundary checks. If you can cause any harm to yourself or society, then for sure you will.</p>

<p>So, is there anything we can do to improve this bleak landscape? Of course there is. A real life version of the <a href="http://en.wikipedia.org/wiki/Technology_in_The_Hitchhiker%27s_Guide_to_the_Galaxy#Joo_Janta_200_Super-Chromatic_Peril_Sensitive_Sunglasses">Joo Janta 200 Super-Chromatic Peril Sensitive Sunglasses</a> <a href="http://en.wikipedia.org/wiki/Project_Glass">may or may not be in the works</a>, so I would keep an eye on those.</p>

<p>We can also try scaring people into doing things right, despite pressure from management. Somebody said <em>&#8220;Always write code as if the person who will be maintaining it is a psychotic serial killer who knows where you live.&#8221;</em> So we could try, say, hiring trainee programmers with actual criminal records and give them the rest of the staff&#8217;s home addresses.</p>

<p>A different approach which seems to be quite popular these days is making difficult for people to shoot themselves (and others) in the feet. Joel Spolsky says that <a href="http://www.joelonsoftware.com/design/1stDraft/03.html"><em>Something is usable if it behaves exactly as expected.</em></a>. That also seems to apply to our development tools. Emerging frameworks and languages appear to focus in allowing programmers to <a href="http://www.hanselman.com/blog/ProgrammerIntentOrWhatYoureNotGettingAboutRubyAndWhyItsTheTits.aspx">express intent</a> instead of complying with the strict rules of machine language. They favour convention over configuration, readability over conciseness, security over performance. Joe Coder shouldn&#8217;t be spending any time in deciding what the best technique is for concatenating immutable strings in a loop, just let the platform take care of those details.</p>

<p>Since we already decided to follow this path then why not going all the way down? Why not deprecate technologies that could potentially allow anyone to cause any kind of harm? Sorry, C and C++ and Objective C: You have to go. CGI? OpenGL? Don&#8217;t even get me started. Root access? HA! We should keep dumbing down our tools, so let&#8217;s make it hard for new programmers to overflow a stack, to divide by zero, to cause a deadlock. Let&#8217;s ban kernel access, unsafe pointers and unmanaged memory. Everyone embrace sandboxed languages: Let&#8217;s write a H.264 decoder in JavaScript!!! (<a href="http://arstechnica.com/open-source/news/2011/10/native-javascript-h264-decoder-offers-compelling-demo-of-js-performance.ars">Oh, wait&#8230;</a>)</p>

<p>Seriously now, it&#8217;s obvious that current trends on corporate IT will surely continue for decades and most legacy systems will actually outlive us. But at least there are now more chances than ever for the next generation of wishful coders to empower their businesses without creating maintenance nightmares in the process. Every year we are closer and closer to intuitively create robust, scalable systems without falling in an endless cycle of corruption and despair.</p>

<p>Of course, it&#8217;s also possible that future programmers will despise our feeble attempts at improving the Status Quo, decide that our tools are too narrow and restrictive, and end up exploiting all kinds of quirks to work around the platform limitations. And we&#8217;ll be back at the starting line.</p>

<p>Nobody knows. And since we suck at predicting the future, maybe <a href="http://neo.jpl.nasa.gov/risk/">it doesn&#8217;t even matter</a>. We&#8217;ll see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding file size in bytes to Explorer's Details View on Windows 2000 and XP]]></title>
    <link href="http://wishfulcoding.com/blog/2012/08/22/adding-file-size-in-bytes-to-explorer-dot-s-details-view-on-windows-2000-and-xp/"/>
    <updated>2012-08-22T01:19:00+10:00</updated>
    <id>http://wishfulcoding.com/blog/2012/08/22/adding-file-size-in-bytes-to-explorer-dot-s-details-view-on-windows-2000-and-xp</id>
    <content type="html"><![CDATA[<p>Mi biggest pet peeve on Windows Explorer is that there is no way to show the size of a file in bytes without having to open the <a href="https://raw.github.com/dredix/FileSizeXP/master/doc/images/FileProperties.png">properties dialog box</a>. You would think the Details view is a great place for that, considering the remarkable selection of columns you can include. Seriously, there is a <em>Mood</em> column but no <em>Size in bytes</em> or equivalent?</p>

<p>On Windows XP and previous versions, you could write a <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/cc144067.aspx">shell extension</a> that implemented the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb776147.aspx">IColumnProvider</a> interface and add custom columns as needed. <a href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-wcstatus.html#id663427">TortoiseSVN</a> used these kind of extensions, for example, to show the status of files under source control directly on Windows Explorer.</p>

<p>On Windows Vista, however, Microsoft <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb776147.aspx">decided to remove the IColumnProvider interface</a>:</p>

<blockquote><p><strong>Note</strong>  Support for <strong>IColumnProvider</strong> has been removed as of Windows Vista. The Windows property system is used in its place. See <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ff728898.aspx">Windows Property System</a> for conceptual materials that explain the use of the new system.</p></blockquote>

<p>My guess is that rogue extensions were causing a lot of performance/stability issues on Windows Explorer and Microsoft didn&#8217;t like being blamed for them (&#8220;Why is Explorer so slow? Stupid Microsoft Die Die Die!&#8221;), so they decided to retire the interface altogether. I haven&#8217;t got too far into the Windows property system but I suspect you cannot mimic the full functionality of custom columns on the details view for every type of file.</p>

<p>Anyway, even if I came 11 years late to the party and it&#8217;s no longer relevant, I decided to take a shot at it and implemented a <a href="https://github.com/dredix/FileSizeXP">shell extension for showing the size of file in bytes</a>. No more <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/03/15/10140985.aspx">undesirable rounding up/down to kilobytes</a> for the benefit of ancient programs that have probably fallen into oblivion.</p>

<p>When installed, the extension adds a new column called <strong>Size in Bytes</strong> which can be added to the explorer&#8217;s Details View:</p>

<p><a href="https://lh5.googleusercontent.com/-Eq_XZFBzVcg/UDQ8w4Z1gfI/AAAAAAAAAIw/XdMl1-_HoZQ/s800/ColumnSelection.png"><img alt="Column Selection" src="https://lh5.googleusercontent.com/-Eq_XZFBzVcg/UDQ8w4Z1gfI/AAAAAAAAAIw/XdMl1-_HoZQ/s800/ColumnSelection.png" /></a></p>

<p>Select it, and you&#8217;ll get an extra column with the file size in glorious bytes:</p>

<p><a href="https://lh3.googleusercontent.com/-DgKb-qm1ByA/UDQ8wyqjbOI/AAAAAAAAAI4/NKNUQbOrAeg/s800/Explorer.png"><img alt="Details View" style="width: 100%" src="https://lh3.googleusercontent.com/-DgKb-qm1ByA/UDQ8wyqjbOI/AAAAAAAAAI4/NKNUQbOrAeg/s800/Explorer.png" /></a></p>

<p>If you still use Windows 2000 or XP <s>don&#8217;t you think is time to move on?</s> and want to use the extension, follow these steps:</p>

<ul>
<li><p>Download the DLL: <a href="https://github.com/dredix/FileSizeXP/raw/master/bin/FileSizeXP.dll">FileSizeXP.dll</a>.</p></li>
<li><p>Put it wherever you want. C:\Utils is as good a place as any.</p></li>
<li><p>Register it by running the following command:<br/>
  <code>regsvr32 C:\path\to\file\FileSizeXP.dll</code></p></li>
<li><p>Restart the PC.</p></li>
</ul>


<p>Note, however, the following caveats:</p>

<ul>
<li><p>The extension does not, I repeat, DOES NOT work on Windows Vista and newer versions. For that you will need need an Explorer replacement, like <a href="http://zabkat.com/">Zabkat&#8217;s Xplorer<sup>2</sup></a>, or just give up on showing full size in bytes in Explorer.</p></li>
<li><p>I haven&#8217;t actually tried the extension on Windows 2000.</p></li>
<li><p>Sorting files by the new column seems to be broken at the moment. I&#8217;ll go back and fix it, hopefully before Windows XP goes out of support.</p></li>
</ul>


<p>If you decided to trust a random guy on the Internet and try this extension, please do let me know how it went.</p>
]]></content>
  </entry>
  
</feed>
